x-common-volumes: &common-volumes
  music-volume: &music-volume "${MUSIC_PATH:-/home/s/Music/71mix/}:/music:ro"


services:
  app:
    build:
      context: .
      dockerfile_inline: |
        FROM alpine:3.19
        WORKDIR /app
        RUN apk add --no-cache \
            ffmpeg \
            nodejs \
            npm
    container_name: jamsend-dev
    working_dir: /app
    volumes:
      - .:/app
      # - "./testsounds:/music:ro"
      - *music-volume
    ports:
      # this would bind to LAN address as well
      #  but WebRTC requires a secure context (can be localhost)
      # - "9091:9091"
      - "172.17.0.1:9091:9091"
    command: npm run dev -- --host 0.0.0.0 --port 9091
    tty: true
    stdin_open: true
    restart: 'always'


    # Resource limits to prevent runaway processes
    deploy:
      resources:
        limits:
          cpus: '2.0'          # Max 2 CPU cores
          memory: 1G           # Max 1GB RAM
        reservations:
          cpus: '0.5'          # Reserve 0.5 CPU cores  
          memory: 256M         # Reserve 256MB RAM
    # Process limits
    ulimits:
      nproc: 100               # Max 100 processes total
      nofile: 1024             # Max 1024 open files

  peerjs:
    image: peerjs/peerjs-server
    container_name: jamsend-peerjs
    ports:
      - "172.17.0.1:9995:9995"
    command: ["--port", "9995"]
    # the Caddy handle_path in leproxy takes this bit of path off
    #, "--path", "/peerjs-server"]
    restart: 'always'

